<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>oe</title>
	<subtitle>my blog bounded context</subtitle>
	
	<link href="https://www.oguzh4n.net/feed/feed.xml" rel="self"/>
	<link href="https://www.oguzh4n.net/"/>
	<updated>2020-04-10T00:00:00-00:00</updated>
	<id>https://www.oguzh4n.net/</id>
	<author>
		<name>Oğuzhan Eren</name>
		<email>oguzh4n @ gmail.com</email>
	</author>
	
	<entry>
		<title>CQRS Nedir?</title>
		<link href="https://www.oguzh4n.net/posts/cqrs-nedir/"/>
		<updated>2014-09-11T00:00:00-00:00</updated>
		<id>https://www.oguzh4n.net/posts/cqrs-nedir/</id>
		<content type="html">&lt;p&gt;CQRS CQS prensibinden türemiştir. Bu nedenle önce CQS&#39;i açıklayalım.&lt;/p&gt;
&lt;h4 id=&quot;command-query-separation&quot;&gt;&lt;a href=&quot;http://martinfowler.com/bliki/CommandQuerySeparation.html&quot;&gt;Command Query Separation&lt;/a&gt; &lt;a class=&quot;direct-link&quot; href=&quot;#command-query-separation&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Bu prensibe göre bir nesnenin metodları Command ve Query olarak ikiye ayrılmalıdır. Bir metod bir nesne üzerinde değişiklik yaparak geriye sonuç döndürmemelidir.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Command&lt;/strong&gt; : Nesnenin durumunu değiştirir fakat geriye sonuç dönmez.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Query&lt;/strong&gt;: Sonuç döndürür fakat nesnenin durumunu değiştirmez.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bu prensib metodların ne yaptığını, ne yapmadığını ve neyi değiştirdiğini anlamak için fayda sağlar.&lt;/p&gt;
&lt;h4 id=&quot;cqrs&quot;&gt;CQRS &lt;a class=&quot;direct-link&quot; href=&quot;#cqrs&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;CQRS &amp;quot;Command-query responsibility segregation&amp;quot; anlamına gelir. Command(yazma) ve Query(okuma) olarak davranışların ayrılmasıdır.&lt;br&gt;
Command ve Query farklı iki nesne tarafından ele alınırlar.&lt;/p&gt;
&lt;p&gt;Genelde servis tanımları aşağıdaki gibidir:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;	ProductService&lt;br&gt;		&lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;AddProduct&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;productId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token return-type class-name&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GetProduct&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;productId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;DisableProduct&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;productId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token return-type class-name&quot;&gt;Product&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GetAllProducts&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;categoryId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yukarıdaki servise CQRS uygulandığında sonuçta okuma ve yazma olarak iki servis elde ederiz:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;	ProductCommandService&lt;br&gt;		&lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;AddProduct&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;productId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;DisableProduct&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;productId&lt;br&gt;&lt;br&gt;	ProductReadService&lt;br&gt;		&lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;AddProduct&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;productId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token return-type class-name&quot;&gt;Product&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GetAllProducts&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;categoryId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bu yaklaşımı daha ileriye taşıyarak Command ve Query için kullanılacak veritabanlarınıda ayırabiliriz.&lt;br&gt;
Bu işlem yapıldığında, okuma işlemleri için optimize edilmiş birden fazla verimodeli ve veritabanı kullanılabilir.&lt;br&gt;
Okuma ve yazma veritabanlarını ayırmak CQRS ile ilişkilidir ve CQRS&#39;in kendisi değildir, CQRS sadece okuma ve yazma işlemlerini ayırmaktır.&lt;/p&gt;
&lt;p&gt;CQRS ilgili önemli ve ilginç olan nokta ne zaman, nerde ve nasıl kullanılacağıdır.&lt;br&gt;
Bu yaklaşımı kullanmak, ölçeklenebilirlik, karmaşıklığı ve değişen iş kurallarını yönetebilmek gibi mimari sorunları daha geniş bir yelpazede çözmek için olanak sağlar.&lt;br&gt;
CQRS bir mimari şablon değildir, tüm sistem düzeyinde uygulanmak yerine birden çok katılımıcının olduğu domainlerde (collaborative domain) ve ölçeklenebilirliğin önemli olduğu Bounded Context&#39;lerde uygulanmalıdır.&lt;/p&gt;
&lt;p&gt;Bir sonraki yazımda CQRS&#39;in ne için uygulanması gerektiği ve hangi sorunları çözdüğünden bahsediyor olacağım.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>SOLID Architecture in Slices not Layers</title>
		<link href="https://www.oguzh4n.net/posts/solid-architecture-video/"/>
		<updated>2015-07-12T00:00:00-00:00</updated>
		<id>https://www.oguzh4n.net/posts/solid-architecture-video/</id>
		<content type="html">&lt;iframe class=&quot;vimeo-embed&quot; src=&quot;https://player.vimeo.com/video/131633177&quot; width=&quot;500&quot; height=&quot;281&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt; &lt;p&gt;&lt;a href=&quot;https://vimeo.com/131633177&quot;&gt;SOLID Architecture in Slices not Layers - Jimmy Bogard&lt;/a&gt; from &lt;a href=&quot;https://vimeo.com/ndcconferences&quot;&gt;NDC Conferences&lt;/a&gt; on &lt;a href=&quot;https://vimeo.com/&quot;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Hello world!</title>
		<link href="https://www.oguzh4n.net/posts/helloworld/"/>
		<updated>2020-04-10T00:00:00-00:00</updated>
		<id>https://www.oguzh4n.net/posts/helloworld/</id>
		<content type="html">&lt;p&gt;Hello world post new static blog&lt;/p&gt;
</content>
	</entry>
</feed>

